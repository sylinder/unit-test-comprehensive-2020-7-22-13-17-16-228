package example;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.*;

import java.util.LinkedList;
import java.util.List;

import static java.time.Duration.ofMillis;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@DisplayName("A special tests collection for junit and mockito")
class LibraryTest {

    @BeforeAll
    static void initTestEnv() {
    }

    @BeforeEach
    void initEveryMethod() {
    }

    @Test
    @DisplayName("someLibraryMethod should return 'true'")
    void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod());
    }

    @Test
    @SuppressWarnings("unchecked")
    void testMockClass() throws Exception {
        // you can mock concrete classes, not only interfaces
        LinkedList mockedList = mock(LinkedList.class);

        // stubbing appears before the actual execution
        String value = "first";
        when(mockedList.get(0)).thenReturn(value);

        Assertions.assertEquals(value, mockedList.get(0));
    }

    @Test
    @SuppressWarnings("unchecked")
    void test_mock_verify() {
        // mock creation
        List<String> mockedList = mock(List.class);
        // using mock object - it does not throw any "unexpected interaction" exception
        mockedList.add("one");
        mockedList.clear();
        // selective, explicit, highly readable verification
        verify(mockedList).add("one");
        verify(mockedList).clear();
    }

    @Test
    void groupedAssertions() {
        // In a grouped assertion all assertions are executed, and any
        // failures will be reported together.
        String firstName = "John";
        String lastName = "Doe";

        assertAll("person",
                () -> assertEquals("John", firstName),
                () -> assertEquals("Doe", lastName)
        );
    }

    @Test
    void exceptionTesting() {
        Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
            throw new IllegalArgumentException("a message");
        });
        Assertions.assertEquals("a message", exception.getMessage());
    }

    @Test
    @Disabled
    void timeoutExceeded() {
        // The following assertion fails with an error message similar to:
        // execution exceeded timeout of 10 ms by 91 ms
        assertTimeout(ofMillis(10), () -> {
            // Simulate task that takes more than 10 ms.
            Thread.sleep(100);
        });
    }

    @Test
    public void should_return_4A0B_when_guess_given_1234() {
        int[] answer = {1, 2, 3, 4};
        int[] givenNumber = {1, 2, 3, 4};
        GuessNumber guessNumber = new GuessNumber();
        String result = guessNumber.guess(answer, givenNumber);
        Assertions.assertEquals("4A0B", result);
    }

    @Test
    public void should_return_1A0B_when_guess_given_1567() {
        int[] answer = {1, 2, 3, 4};
        int[] givenNumber = {1, 5, 6, 7};
        GuessNumber guessNumber = new GuessNumber();
        String result = guessNumber.guess(answer, givenNumber);
        Assertions.assertEquals("1A0B", result);
    }

    @Test
    public void should_return_0A2B_when_guess_given_2478() {
        int[] answer = {1, 2, 3, 4};
        int[] givenNumber = {2, 4, 7, 8};
        GuessNumber guessNumber = new GuessNumber();
        String result = guessNumber.guess(answer, givenNumber);
        Assertions.assertEquals("0A2B", result);
    }
}
